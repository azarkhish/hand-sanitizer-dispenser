;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 05/02/2020
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATtiny13
;AVR Core Clock frequency: 9.600000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 16
;*****************************************************/
;
;#include <tiny13.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <delay.h>
;
;#define ADC_VREF_TYPE 0x20
;
;// Read the 8 most significant bits
;// of the AD conversion result
;//unsigned char read_adc(unsigned char adc_input)
;//{
;//ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;//// Delay needed for the stabilization of the ADC input voltage
;//delay_us(10);
;//// Start the AD conversion
;//ADCSRA|=0x40;
;//// Wait for the AD conversion to complete
;//while ((ADCSRA & 0x10)==0);
;//ADCSRA|=0x10;
;//return ADCH;
;//}
;
;// Declare your global variables here
;void calc_pump_delay(void);
;eeprom int save_delay;
;eeprom int pump_delay;
;eeprom char first_time_k;
;void main(void)
; 0000 0031 {

	.CSEG
;PCODE: $0000000A VOL: 0
; 0000 0032 // Declare your local variables here
; 0000 0033  int i,exist,not_exist;
; 0000 0034 
; 0000 0035 // Crystal Oscillator division factor: 1
; 0000 0036 #pragma optsize-
; 0000 0037 CLKPR=0x80;
;	i -> R16,R17
;	exist -> R18,R19
;	not_exist -> R20,R21
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0000 0038 CLKPR=0x00;
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0039 #ifdef _OPTIMIZE_SIZE_
; 0000 003A #pragma optsize+
; 0000 003B #endif
; 0000 003C 
; 0000 003D // Input/Output Ports initialization
; 0000 003E // Port B initialization
; 0000 003F // Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0040 // State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0041 //PORTB=0x00;
; 0000 0042 //DDRB=0x00;
; 0000 0043 
; 0000 0044 PORTB=0x00;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0045 DDRB=0x07;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0046 
; 0000 0047 // Timer/Counter 0 initialization
; 0000 0048 // Clock source: System Clock
; 0000 0049 // Clock value: Timer 0 Stopped
; 0000 004A // Mode: Normal top=0xFF
; 0000 004B // OC0A output: Disconnected
; 0000 004C // OC0B output: Disconnected
; 0000 004D TCCR0A=0x00;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 004E TCCR0B=0x00;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 004F TCNT0=0x00;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0050 OCR0A=0x00;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0051 OCR0B=0x00;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0052 
; 0000 0053 // External Interrupt(s) initialization
; 0000 0054 // INT0: Off
; 0000 0055 // Interrupt on any change on pins PCINT0-5: Off
; 0000 0056 GIMSK=0x00;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0057 MCUCR=0x00;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0058 
; 0000 0059 // Timer/Counter 0 Interrupt(s) initialization
; 0000 005A TIMSK0=0x00;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 005B 
; 0000 005C // Analog Comparator initialization
; 0000 005D // Analog Comparator: Off
; 0000 005E ACSR=0x80;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 005F ADCSRB=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0060 DIDR0=0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0061 
; 0000 0062 // ADC initialization
; 0000 0063 // ADC Clock frequency: 75.000 kHz
; 0000 0064 // ADC Bandgap Voltage Reference: Off
; 0000 0065 // ADC Auto Trigger Source: Free Running
; 0000 0066 // Only the 8 most significant bits of
; 0000 0067 // the AD conversion result are used
; 0000 0068 // Digital input buffers on ADC0: Off, ADC1: On, ADC2: Off, ADC3: Off
; 0000 0069 DIDR0&=0x03;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 006A DIDR0|=0x00;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 006B ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 006C ADCSRA=0xA7;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 006D ADCSRB&=0xF8;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 006E 
; 0000 006F 
; 0000 0070 /////////////////////////////////////////
; 0000 0071 DDRB=0x07;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0072 /////////////////////////////
; 0000 0073 PORTB.1 = 0; // pump
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0074 PORTB.0 = 1; // cheragh
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0075 PORTB.2 = 0; // sensor
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0076 exist = 0;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0077 not_exist = 0;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0078 
; 0000 0079 if (first_time_k != 27)
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 007A {
; 0000 007B save_delay = 2;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 007C pump_delay = 550;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 007D first_time_k = 27;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 007E }
; 0000 007F 
; 0000 0080 delay_ms(500);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0081 //////////////////////////
; 0000 0082 
; 0000 0083  calc_pump_delay();
;PCODE: $00000053 VOL: 0
; 0000 0084 
; 0000 0085 DDRB=0x07;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0086 while (1)
;PCODE: $00000056 VOL: 0
; 0000 0087       {
; 0000 0088 
; 0000 0089       //////////////////////
; 0000 008A 
; 0000 008B 
; 0000 008C           PORTB.2 = 1; // sensor pulse
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 008D           delay_us(20);
;PCODE: $00000059 VOL: 0
; 0000 008E           PORTB.2 = 0;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 008F 
; 0000 0090           DDRB=0x03;    //pb.2 = input
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0091 
; 0000 0092           while (!PINB.2)
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0093           {
; 0000 0094           };
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0095 
; 0000 0096           i = 0;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0097           while (PINB.2)
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0098           {
; 0000 0099           i++;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 009A           delay_us(10);
;PCODE: $0000006C VOL: 0
; 0000 009B           };
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 009C 
; 0000 009D 
; 0000 009E           DDRB=0x07;   //pb.2 = output
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 009F 
; 0000 00A0           if (i<100) // ›«’·Â
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00A1           {
; 0000 00A2           if (exist <= 2) exist ++;  // «ê— œÊ »«— Å‘  ”— Â„ ”‰”Ê—  ‘ŒÌ’ Õ÷Ê— œ«œ ⁄„· ò‰œ
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00A3 
; 0000 00A4 
; 0000 00A5               if (exist == 2)
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00A6               {
; 0000 00A7               not_exist = 0;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00A8 
; 0000 00A9               /////////wash hands///////////
; 0000 00AA                PORTB.0 = 0; //led
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00AB                PORTB.1 = 1; //pump
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00AC                delay_ms(pump_delay);   // relay pulse delay
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00AD                PORTB.1 = 0;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00AE                PORTB.0 = 1;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00AF               //////////////////////////////
; 0000 00B0                delay_ms(100);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00B1               }
; 0000 00B2 
; 0000 00B3 
; 0000 00B4           }
;PCODE: $0000008E VOL: 0
; 0000 00B5 
; 0000 00B6           if (i>=100)  // ›«’·Â
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00B7           {
; 0000 00B8           if (not_exist <= 2) not_exist ++;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00B9           if (not_exist == 2)
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00BA           {
; 0000 00BB           exist = 0;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00BC           }
; 0000 00BD           }
;PCODE: $0000009E VOL: 0
; 0000 00BE 
; 0000 00BF  delay_ms(100);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00C0 
; 0000 00C1 //
; 0000 00C2 /////////////////////////////////
; 0000 00C3 
; 0000 00C4 
; 0000 00C5       }
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00C6 };
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;//
;
; void calc_pump_delay(void)
; 0000 00CA  {
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00CB  int h,s;
; 0000 00CC 
; 0000 00CD h = 0;
;PCODE: $000000AA VOL: 0
;	h -> R16,R17
;	s -> R18,R19
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00CE DDRB=0x07;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00CF 
; 0000 00D0  while (h<100)
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00D1  {
; 0000 00D2 
; 0000 00D3           PORTB.2 = 1; // sensor pulse
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00D4           delay_us(20);
;PCODE: $000000B5 VOL: 0
; 0000 00D5           PORTB.2 = 0;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00D6 
; 0000 00D7           DDRB=0x03;    //pb.2 = input
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00D8 
; 0000 00D9           while (!PINB.2)
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00DA           {
; 0000 00DB           };
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00DC 
; 0000 00DD           h = 0;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00DE           while (PINB.2)
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00DF           {
; 0000 00E0           h++;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00E1           delay_us(10);
;PCODE: $000000C8 VOL: 0
; 0000 00E2           };
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00E3 
; 0000 00E4 
; 0000 00E5           DDRB=0x07;   //pb.2 = output
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00E6 
; 0000 00E7           if (h<100) // ›«’·Â
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00E8           {
; 0000 00E9           save_delay ++;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00EA 
; 0000 00EB           if (save_delay > 3)
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00EC            {
; 0000 00ED            save_delay = 1;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00EE            }
; 0000 00EF 
; 0000 00F0            for (s=1;s<=save_delay ;s++)
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00F1            {
; 0000 00F2              /////////blink hand led///////////
; 0000 00F3                PORTB.0 = 0; //led
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00F4                delay_ms(100);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00F5                PORTB.0 = 1;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00F6                delay_ms(100);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00F7               //////////////////////////////
; 0000 00F8            }
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00F9            delay_ms(2000);
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00FA 
; 0000 00FB           }
; 0000 00FC  }
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00FD 
; 0000 00FE if (save_delay == 1){pump_delay = 350; }
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00FF if (save_delay == 2){pump_delay = 550; }
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0100 if (save_delay == 3){pump_delay = 950; }
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 0101 
; 0000 0102  };
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
